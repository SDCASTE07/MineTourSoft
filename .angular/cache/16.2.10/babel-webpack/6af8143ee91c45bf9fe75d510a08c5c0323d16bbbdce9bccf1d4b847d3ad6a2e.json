{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n  }\n  signup(signupRequest) {\n    return this.http.post(environment.url + \"sign-up\", signupRequest);\n  }\n  login(loginRequest) {\n    const url = `${environment.url}/authenticate`;\n    return this.http.post(url, loginRequest);\n  }\n  hello() {\n    return this.http.get(environment.url + 'api/hello', {\n      headers: this.createAuthorizationHeader()\n    });\n  }\n  createAuthorizationHeader() {\n    const jwtToken = localStorage.getItem('JWT');\n    if (jwtToken) {\n      return new HttpHeaders().set('Authorization', 'Bearer ' + jwtToken);\n    } else {\n      console.log(\"JWT token not found in the Local Storage\");\n    }\n    return null;\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","environment","AuthService","constructor","http","signup","signupRequest","post","url","login","loginRequest","hello","get","headers","createAuthorizationHeader","jwtToken","localStorage","getItem","set","console","log","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Nueva carpeta\\MineTourSoft\\src\\app\\examples\\signin\\service\\auth.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from 'environments/environment';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  signup(signupRequest: any): Observable<any> {\r\n    return this.http.post(environment.url + \"sign-up\", signupRequest)\r\n  }\r\n\r\n  login(loginRequest: any): Observable<any> {\r\n    const url =`${environment.url}/authenticate`;\r\n    return this.http.post(url, loginRequest)\r\n  }\r\n\r\n  hello(): Observable<any> {\r\n    return this.http.get(environment.url + 'api/hello', {\r\n      headers: this.createAuthorizationHeader()\r\n    });\r\n  }\r\n\r\n  private createAuthorizationHeader() {\r\n    const jwtToken = localStorage.getItem('JWT');\r\n    if (jwtToken) {\r\n      return new HttpHeaders().set(\r\n        'Authorization', 'Bearer ' + jwtToken\r\n      )\r\n    } else {\r\n      console.log(\"JWT token not found in the Local Storage\");\r\n    }\r\n    return null;\r\n  }\r\n\r\n}\r\n"],"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAG9D,SAASC,WAAW,QAAQ,0BAA0B;;;AAOtD,OAAM,MAAOC,WAAW;EAEtBC,YACUC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EACV;EAEJC,MAAMA,CAACC,aAAkB;IACvB,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAACN,WAAW,CAACO,GAAG,GAAG,SAAS,EAAEF,aAAa,CAAC;EACnE;EAEAG,KAAKA,CAACC,YAAiB;IACrB,MAAMF,GAAG,GAAE,GAAGP,WAAW,CAACO,GAAG,eAAe;IAC5C,OAAO,IAAI,CAACJ,IAAI,CAACG,IAAI,CAACC,GAAG,EAAEE,YAAY,CAAC;EAC1C;EAEAC,KAAKA,CAAA;IACH,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAACX,WAAW,CAACO,GAAG,GAAG,WAAW,EAAE;MAClDK,OAAO,EAAE,IAAI,CAACC,yBAAyB;KACxC,CAAC;EACJ;EAEQA,yBAAyBA,CAAA;IAC/B,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC;IAC5C,IAAIF,QAAQ,EAAE;MACZ,OAAO,IAAIf,WAAW,EAAE,CAACkB,GAAG,CAC1B,eAAe,EAAE,SAAS,GAAGH,QAAQ,CACtC;KACF,MAAM;MACLI,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;;IAEzD,OAAO,IAAI;EACb;EAAC,QAAAC,CAAA,G;qBA/BUnB,WAAW,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXxB,WAAW;IAAAyB,OAAA,EAAXzB,WAAW,CAAA0B,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}